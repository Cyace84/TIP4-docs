import{_ as t,c as e,o,V as i}from"./chunks/framework.af8f98c2.js";const _=JSON.parse('{"title":"NFT","description":"","frontmatter":{},"headers":[],"relativePath":"specification/NFT.md","filePath":"src/pages/specification/NFT.md"}'),a={name:"specification/NFT.md"},c=i('<h1 id="nft" tabindex="-1">NFT <a class="header-anchor" href="#nft" aria-label="Permalink to &quot;NFT&quot;">â€‹</a></h1><p>As explained earlier, a <code>NFT</code> contract is developed to handle the logic of the TIP-4_nNFT contracts.<code>NFT</code> simply feeds the constructor of the inheriting TIP-4_nNft contracts.</p><p>When it comes to indexing functionality, the <code>NFT</code> contract must implement the methods that handles the deployment and destruction of the index contracts when ever its required.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li><p>Please note that <code>Broxus</code> provides two implementations for the Nft contract:</p><ul><li><a href="https://github.com/broxus/tip4/blob/master/contracts/Nft.tsol" target="_blank" rel="noreferrer"><code>Nft</code></a></li><li><a href="https://github.com/broxus/tip4/blob/master/contracts/NftWithRoyalty.tsol" target="_blank" rel="noreferrer"><code>NftWithRoyalty</code></a></li></ul></li></ul><p>In this documentation, we will be utilizing the <code>NftWithRoyalty</code> contract as it supports the royalty functionality. However, individual users have the flexibility to choose either version based on their preferred approach.</p><ul><li>Please refer to the <a href="./../usageAndDeployment/mintingNft.html"><code>Minting Nft</code></a> section to find out how to mint and use the <code>NftWithRoyalty</code> contract.</li></ul></div>',4),n=[c];function r(s,l,d,h,p,f){return o(),e("div",null,n)}const m=t(a,[["render",r]]);export{_ as __pageData,m as default};
